
module partial_product_enable(

    input  [15:0] A,
    input  [15:0] B,
	input enable,
    output [31:0] ans
);
    reg [31:0] PP0,  PP1,  PP2,  PP3,  PP4,  PP5,  PP6,  PP7,
                PP8,  PP9,  PP10, PP11, PP12, PP13, PP14, PP15;
				
	always @(*) begin
		if(enable) begin
			 PP0  = {16'b0, (A & {16{B[0]}})}  << 0;
			 PP1  = {16'b0, (A & {16{B[1]}})}  << 1;
			 PP2  = {16'b0, (A & {16{B[2]}})}  << 2;
			 PP3  = {16'b0, (A & {16{B[3]}})}  << 3;
			 PP4  = {16'b0, (A & {16{B[4]}})}  << 4;
			 PP5  = {16'b0, (A & {16{B[5]}})}  << 5;
			 PP6  = {16'b0, (A & {16{B[6]}})}  << 6;
			 PP7  = {16'b0, (A & {16{B[7]}})}  << 7;
			 PP8  = {16'b0, (A & {16{B[8]}})}  << 8;
			 PP9  = {16'b0, (A & {16{B[9]}})}  << 9;
			 PP10 = {16'b0, (A & {16{B[10]}})} << 10;
			 PP11 = {16'b0, (A & {16{B[11]}})} << 11;
			 PP12 = {16'b0, (A & {16{B[12]}})} << 12;
			 PP13 = {16'b0, (A & {16{B[13]}})} << 13;
			 PP14 = {16'b0, (A & {16{B[14]}})} << 14;
			 PP15 = {16'b0, (A & {16{B[15]}})} << 15;
		end 
		else 
            begin
                PP0 = 32'b0;
                PP1 = 32'b0;
                PP2 = 32'b0;
                PP3 = 32'b0;
                PP4 = 32'b0;
                PP5 = 32'b0;
                PP6 = 32'b0;
                PP7 = 32'b0;
                PP8 = 32'b0;
                PP9 = 32'b0;
                PP10 = 32'b0;
                PP11 = 32'b0;
                PP12 = 32'b0;
                PP13 = 32'b0;
                PP14 = 32'b0;
                PP15 = 32'b0;
           end
	end

   assign ans = PP15;

endmodule

