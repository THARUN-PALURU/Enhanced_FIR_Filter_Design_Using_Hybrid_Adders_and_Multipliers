module partial_product_min_size (
    input  [15:0] A,   // 16-bit multiplicand
    input  [15:0] B,   // 16-bit multiplier
    output [31:0] pro  // 32-bit product
);
    // Declare partial products with minimal widths.
    // When B[i] is 1, pp[i] equals A shifted left by i (width = 16+i); else, it's zero.
    wire [15:0]  pp0;   // width = 16 bits (no shift)
    wire [16:0]  pp1;   // width = 17 bits (shift by 1)
    wire [17:0]  pp2;   // width = 18 bits (shift by 2)
    wire [18:0]  pp3;   // width = 19 bits (shift by 3)
    wire [19:0]  pp4;   // width = 20 bits (shift by 4)
    wire [20:0]  pp5;   // width = 21 bits (shift by 5)
    wire [21:0]  pp6;   // width = 22 bits (shift by 6)
    wire [22:0]  pp7;   // width = 23 bits (shift by 7)
    wire [23:0]  pp8;   // width = 24 bits (shift by 8)
    wire [24:0]  pp9;   // width = 25 bits (shift by 9)
    wire [25:0]  pp10;  // width = 26 bits (shift by 10)
    wire [26:0]  pp11;  // width = 27 bits (shift by 11)
    wire [27:0]  pp12;  // width = 28 bits (shift by 12)
    wire [28:0]  pp13;  // width = 29 bits (shift by 13)
    wire [29:0]  pp14;  // width = 30 bits (shift by 14)
    wire [30:0]  pp15;  // width = 31 bits (shift by 15)
    
    // Generate each partial product:
    // We explicitly concatenate the required number of zeros with the 16-bit result,
    // so that the result naturally becomes (16+i) bits wide.
    assign pp0  = A & {16{B[0]}};
    assign pp1  = ({1'b0, A & {16{B[1]}}}) << 1;
    assign pp2  = ({2'b0, A & {16{B[2]}}}) << 2;
    assign pp3  = ({3'b0, A & {16{B[3]}}}) << 3;
    assign pp4  = ({4'b0, A & {16{B[4]}}}) << 4;
    assign pp5  = ({5'b0, A & {16{B[5]}}}) << 5;
    assign pp6  = ({6'b0, A & {16{B[6]}}}) << 6;
    assign pp7  = ({7'b0, A & {16{B[7]}}}) << 7;
    assign pp8  = ({8'b0, A & {16{B[8]}}}) << 8;
    assign pp9  = ({9'b0, A & {16{B[9]}}}) << 9;
    assign pp10 = ({10'b0, A & {16{B[10]}}}) << 10;
    assign pp11 = ({11'b0, A & {16{B[11]}}}) << 11;
    assign pp12 = ({12'b0, A & {16{B[12]}}}) << 12;
    assign pp13 = ({13'b0, A & {16{B[13]}}}) << 13;
    assign pp14 = ({14'b0, A & {16{B[14]}}}) << 14;
    assign pp15 = ({15'b0, A & {16{B[15]}}}) << 15;
 
    
    assign pro = pp15;
    
endmodule
