
//------------------------------------------------------------------------------
// Booth Encoder for 16-bit Multiplication
// Implements Radix-4 modified Booth encoding to generate 8 partial products.
//------------------------------------------------------------------------------
module booth_encoder_16bit(
    input  signed [15:0] A,   // Multiplicand (signed)
    input  [15:0]        B,   // Multiplier (unsigned)
	output [31:0] ans
   
);
	wire [31:0]        PP0; // Partial Product 0 (no shift)
    wire [31:0]        PP1; // Partial Product 1 (shifted by 2 bits)
    wire [31:0]        PP2; // Partial Product 2 (shifted by 4 bits)
    wire [31:0]        PP3; // Partial Product 3 (shifted by 6 bits)
    wire [31:0]        PP4; // Partial Product 4 (shifted by 8 bits)
    wire [31:0]        PP5; // Partial Product 5 (shifted by 10 bits)
    wire [31:0]        PP6; // Partial Product 6 (shifted by 12 bits)
    wire [31:0]        PP7; // Partial Product 7 (shifted by 14 bits)
    // Form overlapping 3-bit groups from the multiplier B.
    // For group 0, we prepend a zero.
    wire [2:0] booth0 = {B[1], B[0], 1'b0};
    wire [2:0] booth1 = {B[3], B[2], B[1]};
    wire [2:0] booth2 = {B[5], B[4], B[3]};
    wire [2:0] booth3 = {B[7], B[6], B[5]};
    wire [2:0] booth4 = {B[9], B[8], B[7]};
    wire [2:0] booth5 = {B[11],B[10],B[9]};
    wire [2:0] booth6 = {B[13],B[12],B[11]};
    wire [2:0] booth7 = {B[15],B[14],B[13]};

    // Decode each Booth group to determine the multiplier factor.
    // Mapping:
    //   000 or 111 =>  0
    //   001 or 010 => +1
    //   011        => +2
    //   100        => -2
    //   101 or 110 => -1
    wire signed [2:0] factor0, factor1, factor2, factor3,
                      factor4, factor5, factor6, factor7;

    assign factor0 = (booth0 == 3'b001 || booth0 == 3'b010) ? 3'sd1  :
                     (booth0 == 3'b011)                     ? 3'sd2  :
                     (booth0 == 3'b100)                     ? -3'sd2 :
                     (booth0 == 3'b101 || booth0 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor1 = (booth1 == 3'b001 || booth1 == 3'b010) ? 3'sd1  :
                     (booth1 == 3'b011)                     ? 3'sd2  :
                     (booth1 == 3'b100)                     ? -3'sd2 :
                     (booth1 == 3'b101 || booth1 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor2 = (booth2 == 3'b001 || booth2 == 3'b010) ? 3'sd1  :
                     (booth2 == 3'b011)                     ? 3'sd2  :
                     (booth2 == 3'b100)                     ? -3'sd2 :
                     (booth2 == 3'b101 || booth2 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor3 = (booth3 == 3'b001 || booth3 == 3'b010) ? 3'sd1  :
                     (booth3 == 3'b011)                     ? 3'sd2  :
                     (booth3 == 3'b100)                     ? -3'sd2 :
                     (booth3 == 3'b101 || booth3 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor4 = (booth4 == 3'b001 || booth4 == 3'b010) ? 3'sd1  :
                     (booth4 == 3'b011)                     ? 3'sd2  :
                     (booth4 == 3'b100)                     ? -3'sd2 :
                     (booth4 == 3'b101 || booth4 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor5 = (booth5 == 3'b001 || booth5 == 3'b010) ? 3'sd1  :
                     (booth5 == 3'b011)                     ? 3'sd2  :
                     (booth5 == 3'b100)                     ? -3'sd2 :
                     (booth5 == 3'b101 || booth5 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor6 = (booth6 == 3'b001 || booth6 == 3'b010) ? 3'sd1  :
                     (booth6 == 3'b011)                     ? 3'sd2  :
                     (booth6 == 3'b100)                     ? -3'sd2 :
                     (booth6 == 3'b101 || booth6 == 3'b110) ? -3'sd1 : 3'sd0;

    assign factor7 = (booth7 == 3'b001 || booth7 == 3'b010) ? 3'sd1  :
                     (booth7 == 3'b011)                     ? 3'sd2  :
                     (booth7 == 3'b100)                     ? -3'sd2 :
                     (booth7 == 3'b101 || booth7 == 3'b110) ? -3'sd1 : 3'sd0;

    // Generate partial products by multiplying A with the factor.
    // Each partial product is then shifted left by (2*i) bits, where i is the group index.
    assign PP0 = $signed(A) * factor0;              // Shift 0 bits (group 0)
    assign PP1 = ($signed(A) * factor1) << 2;         // Shift left by 2 bits (group 1)
    assign PP2 = ($signed(A) * factor2) << 4;         // Shift left by 4 bits (group 2)
    assign PP3 = ($signed(A) * factor3) << 6;         // Shift left by 6 bits (group 3)
    assign PP4 = ($signed(A) * factor4) << 8;         // Shift left by 8 bits (group 4)
    assign PP5 = ($signed(A) * factor5) << 10;        // Shift left by 10 bits (group 5)
    assign PP6 = ($signed(A) * factor6) << 12;        // Shift left by 12 bits (group 6)
    assign PP7 = ($signed(A) * factor7) << 14;        // Shift left by 14 bits (group 7)
	
	assign ans = PP7;

endmodule