module hybrid_multiplier_16bit_2chains (
    input  [15:0] A,      // 16-bit multiplicand
    input  [15:0] B,      // 16-bit multiplier
    input         en,     // Enable signal
    output [31:0] Product // 32-bit product output
);
    //======================================================================
    // Stage 0: Partial Product Generation (with shifting)
    // Each partial product is generated as:
    //    PPi = {16'b0, (A & {16{B[i]}})} << i
    // Unrolled explicitly (no loops):
    reg [31:0] PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7;
    reg [31:0] PP8, PP9, PP10, PP11, PP12, PP13, PP14, PP15;
    
    always @(*) begin
        if (en) begin
            PP0  = {16'b0, (A & {16{B[0]}})} << 0;
            PP1  = {16'b0, (A & {16{B[1]}})} << 1;
            PP2  = {16'b0, (A & {16{B[2]}})} << 2;
            PP3  = {16'b0, (A & {16{B[3]}})} << 3;
            PP4  = {16'b0, (A & {16{B[4]}})} << 4;
            PP5  = {16'b0, (A & {16{B[5]}})} << 5;
            PP6  = {16'b0, (A & {16{B[6]}})} << 6;
            PP7  = {16'b0, (A & {16{B[7]}})} << 7;
            PP8  = {16'b0, (A & {16{B[8]}})} << 8;
            PP9  = {16'b0, (A & {16{B[9]}})} << 9;
            PP10 = {16'b0, (A & {16{B[10]}})} << 10;
            PP11 = {16'b0, (A & {16{B[11]}})} << 11;
            PP12 = {16'b0, (A & {16{B[12]}})} << 12;
            PP13 = {16'b0, (A & {16{B[13]}})} << 13;
            PP14 = {16'b0, (A & {16{B[14]}})} << 14;
            PP15 = {16'b0, (A & {16{B[15]}})} << 15;
        end else begin
            PP0  = 32'b0; PP1  = 32'b0; PP2  = 32'b0; PP3  = 32'b0;
            PP4  = 32'b0; PP5  = 32'b0; PP6  = 32'b0; PP7  = 32'b0;
            PP8  = 32'b0; PP9  = 32'b0; PP10 = 32'b0; PP11 = 32'b0;
            PP12 = 32'b0; PP13 = 32'b0; PP14 = 32'b0; PP15 = 32'b0;
        end
    end
    
    //======================================================================
    // Stage 1: Two Parallel Chains
    // We split the 16 partial products into two chains:
    //   - Chain 1: PP0 through PP7
    //   - Chain 2: PP8 through PP15
    // Each chain uses a serial (ripple) addition.
    //======================================================================
    
    // ----- Chain 1: Partial Products 0..7 -----
    wire [31:0] c1_0, c1_1, c1_2, c1_3, c1_4, c1_5, chain1_final;
    wire [6:0]  c1_cout;
    
    hyd_adr32 chain1_adder0 (
        .A(PP0),
        .B(PP1),
        .Cin(1'b0),
        .enable(en),
        .Sum(c1_0),
        .Cout(c1_cout[0])
    );
    hyd_adr32 chain1_adder1 (
        .A(c1_0),
        .B(PP2),
        .Cin(c1_cout[0]),
        .enable(en),
        .Sum(c1_1),
        .Cout(c1_cout[1])
    );
    hyd_adr32 chain1_adder2 (
        .A(c1_1),
        .B(PP3),
        .Cin(c1_cout[1]),
        .enable(en),
        .Sum(c1_2),
        .Cout(c1_cout[2])
    );
    hyd_adr32 chain1_adder3 (
        .A(c1_2),
        .B(PP4),
        .Cin(c1_cout[2]),
        .enable(en),
        .Sum(c1_3),
        .Cout(c1_cout[3])
    );
    hyd_adr32 chain1_adder4 (
        .A(c1_3),
        .B(PP5),
        .Cin(c1_cout[3]),
        .enable(en),
        .Sum(c1_4),
        .Cout(c1_cout[4])
    );
    hyd_adr32 chain1_adder5 (
        .A(c1_4),
        .B(PP6),
        .Cin(c1_cout[4]),
        .enable(en),
        .Sum(c1_5),
        .Cout(c1_cout[5])
    );
    hyd_adr32 chain1_adder6 (
        .A(c1_5),
        .B(PP7),
        .Cin(c1_cout[5]),
        .enable(en),
        .Sum(chain1_final),
        .Cout(c1_cout[6])
    );
    
    // ----- Chain 2: Partial Products 8..15 -----
    wire [31:0] c2_0, c2_1, c2_2, c2_3, c2_4, c2_5, chain2_final;
    wire [6:0]  c2_cout;
    
    hyd_adr32 chain2_adder0 (
        .A(PP8),
        .B(PP9),
        .Cin(1'b0),
        .enable(en),
        .Sum(c2_0),
        .Cout(c2_cout[0])
    );
    hyd_adr32 chain2_adder1 (
        .A(c2_0),
        .B(PP10),
        .Cin(c2_cout[0]),
        .enable(en),
        .Sum(c2_1),
        .Cout(c2_cout[1])
    );
    hyd_adr32 chain2_adder2 (
        .A(c2_1),
        .B(PP11),
        .Cin(c2_cout[1]),
        .enable(en),
        .Sum(c2_2),
        .Cout(c2_cout[2])
    );
    hyd_adr32 chain2_adder3 (
        .A(c2_2),
        .B(PP12),
        .Cin(c2_cout[2]),
        .enable(en),
        .Sum(c2_3),
        .Cout(c2_cout[3])
    );
    hyd_adr32 chain2_adder4 (
        .A(c2_3),
        .B(PP13),
        .Cin(c2_cout[3]),
        .enable(en),
        .Sum(c2_4),
        .Cout(c2_cout[4])
    );
    hyd_adr32 chain2_adder5 (
        .A(c2_4),
        .B(PP14),
        .Cin(c2_cout[4]),
        .enable(en),
        .Sum(c2_5),
        .Cout(c2_cout[5])
    );
    hyd_adr32 chain2_adder6 (
        .A(c2_5),
        .B(PP15),
        .Cin(c2_cout[5]),
        .enable(en),
        .Sum(chain2_final),
        .Cout(c2_cout[6])
    );
    
    //------------------------------------------------------------------
    // Stage 2: Final Adder to Combine the Two Chain Results
    //------------------------------------------------------------------
    wire [31:0] final_sum;
    hyd_adr32 final_adder (
        .A(chain1_final),
        .B(chain2_final),
        .Cin(1'b0),
        .enable(en),
        .Sum(final_sum),
        .Cout() // Not used for the final product
    );
    
    // Final assignment: if en is low, output zero; else output final_sum
    assign Product = (en ? final_sum : 32'b0);
    
endmodule
