module kogge_stone_16bit(
    input  [15:0] A,
    input  [15:0] B,
    input         Cin,
    output [15:0] Sum,
    output        Cout
);

  // -------------------------------
  // Stage 0: Initial Generate/Propagate
  // -------------------------------
  wire [15:0] G0, P0;
  assign G0 = A & B;
  assign P0 = A ^ B;

  // -------------------------------
  // Stage 1: Offset = 1
  // -------------------------------
  wire [15:0] G1, P1;
  assign G1[0]  = G0[0];
  assign P1[0]  = P0[0];
  assign G1[1]  = G0[1]  | (P0[1]  & G0[0]);
  assign P1[1]  = P0[1]  & P0[0];
  assign G1[2]  = G0[2]  | (P0[2]  & G0[1]);
  assign P1[2]  = P0[2]  & P0[1];
  assign G1[3]  = G0[3]  | (P0[3]  & G0[2]);
  assign P1[3]  = P0[3]  & P0[2];
  assign G1[4]  = G0[4]  | (P0[4]  & G0[3]);
  assign P1[4]  = P0[4]  & P0[3];
  assign G1[5]  = G0[5]  | (P0[5]  & G0[4]);
  assign P1[5]  = P0[5]  & P0[4];
  assign G1[6]  = G0[6]  | (P0[6]  & G0[5]);
  assign P1[6]  = P0[6]  & P0[5];
  assign G1[7]  = G0[7]  | (P0[7]  & G0[6]);
  assign P1[7]  = P0[7]  & P0[6];
  assign G1[8]  = G0[8]  | (P0[8]  & G0[7]);
  assign P1[8]  = P0[8]  & P0[7];
  assign G1[9]  = G0[9]  | (P0[9]  & G0[8]);
  assign P1[9]  = P0[9]  & P0[8];
  assign G1[10] = G0[10] | (P0[10] & G0[9]);
  assign P1[10] = P0[10] & P0[9];
  assign G1[11] = G0[11] | (P0[11] & G0[10]);
  assign P1[11] = P0[11] & P0[10];
  assign G1[12] = G0[12] | (P0[12] & G0[11]);
  assign P1[12] = P0[12] & P0[11];
  assign G1[13] = G0[13] | (P0[13] & G0[12]);
  assign P1[13] = P0[13] & P0[12];
  assign G1[14] = G0[14] | (P0[14] & G0[13]);
  assign P1[14] = P0[14] & P0[13];
  assign G1[15] = G0[15] | (P0[15] & G0[14]);
  assign P1[15] = P0[15] & P0[14];

  // -------------------------------
  // Stage 2: Offset = 2
  // -------------------------------
  wire [15:0] G2, P2;
  assign G2[0]  = G1[0];
  assign P2[0]  = P1[0];
  assign G2[1]  = G1[1];
  assign P2[1]  = P1[1];
  assign G2[2]  = G1[2]  | (P1[2]  & G1[0]);
  assign P2[2]  = P1[2]  & P1[0];
  assign G2[3]  = G1[3]  | (P1[3]  & G1[1]);
  assign P2[3]  = P1[3]  & P1[1];
  assign G2[4]  = G1[4]  | (P1[4]  & G1[2]);
  assign P2[4]  = P1[4]  & P1[2];
  assign G2[5]  = G1[5]  | (P1[5]  & G1[3]);
  assign P2[5]  = P1[5]  & P1[3];
  assign G2[6]  = G1[6]  | (P1[6]  & G1[4]);
  assign P2[6]  = P1[6]  & P1[4];
  assign G2[7]  = G1[7]  | (P1[7]  & G1[5]);
  assign P2[7]  = P1[7]  & P1[5];
  assign G2[8]  = G1[8]  | (P1[8]  & G1[6]);
  assign P2[8]  = P1[8]  & P1[6];
  assign G2[9]  = G1[9]  | (P1[9]  & G1[7]);
  assign P2[9]  = P1[9]  & P1[7];
  assign G2[10] = G1[10] | (P1[10] & G1[8]);
  assign P2[10] = P1[10] & P1[8];
  assign G2[11] = G1[11] | (P1[11] & G1[9]);
  assign P2[11] = P1[11] & P1[9];
  assign G2[12] = G1[12] | (P1[12] & G1[10]);
  assign P2[12] = P1[12] & P1[10];
  assign G2[13] = G1[13] | (P1[13] & G1[11]);
  assign P2[13] = P1[13] & P1[11];
  assign G2[14] = G1[14] | (P1[14] & G1[12]);
  assign P2[14] = P1[14] & P1[12];
  assign G2[15] = G1[15] | (P1[15] & G1[13]);
  assign P2[15] = P1[15] & P1[13];

  // -------------------------------
  // Stage 3: Offset = 4
  // -------------------------------
  wire [15:0] G3, P3;
  assign G3[0]  = G2[0];
  assign P3[0]  = P2[0];
  assign G3[1]  = G2[1];
  assign P3[1]  = P2[1];
  assign G3[2]  = G2[2];
  assign P3[2]  = P2[2];
  assign G3[3]  = G2[3];
  assign P3[3]  = P2[3];
  assign G3[4]  = G2[4]  | (P2[4]  & G2[0]);
  assign P3[4]  = P2[4]  & P2[0];
  assign G3[5]  = G2[5]  | (P2[5]  & G2[1]);
  assign P3[5]  = P2[5]  & P2[1];
  assign G3[6]  = G2[6]  | (P2[6]  & G2[2]);
  assign P3[6]  = P2[6]  & P2[2];
  assign G3[7]  = G2[7]  | (P2[7]  & G2[3]);
  assign P3[7]  = P2[7]  & P2[3];
  assign G3[8]  = G2[8]  | (P2[8]  & G2[4]);
  assign P3[8]  = P2[8]  & P2[4];
  assign G3[9]  = G2[9]  | (P2[9]  & G2[5]);
  assign P3[9]  = P2[9]  & P2[5];
  assign G3[10] = G2[10] | (P2[10] & G2[6]);
  assign P3[10] = P2[10] & P2[6];
  assign G3[11] = G2[11] | (P2[11] & G2[7]);
  assign P3[11] = P2[11] & P2[7];
  assign G3[12] = G2[12] | (P2[12] & G2[8]);
  assign P3[12] = P2[12] & P2[8];
  assign G3[13] = G2[13] | (P2[13] & G2[9]);
  assign P3[13] = P2[13] & P2[9];
  assign G3[14] = G2[14] | (P2[14] & G2[10]);
  assign P3[14] = P2[14] & P2[10];
  assign G3[15] = G2[15] | (P2[15] & G2[11]);
  assign P3[15] = P2[15] & P2[11];

  // -------------------------------
  // Stage 4: Offset = 8
  // -------------------------------
  wire [15:0] G4, P4;
  assign G4[0]  = G3[0];
  assign P4[0]  = P3[0];
  assign G4[1]  = G3[1];
  assign P4[1]  = P3[1];
  assign G4[2]  = G3[2];
  assign P4[2]  = P3[2];
  assign G4[3]  = G3[3];
  assign P4[3]  = P3[3];
  assign G4[4]  = G3[4];
  assign P4[4]  = P3[4];
  assign G4[5]  = G3[5];
  assign P4[5]  = P3[5];
  assign G4[6]  = G3[6];
  assign P4[6]  = P3[6];
  assign G4[7]  = G3[7];
  assign P4[7]  = P3[7];
  assign G4[8]  = G3[8]  | (P3[8]  & G3[0]);
  assign P4[8]  = P3[8]  & P3[0];
  assign G4[9]  = G3[9]  | (P3[9]  & G3[1]);
  assign P4[9]  = P3[9]  & P3[1];
  assign G4[10] = G3[10] | (P3[10] & G3[2]);
  assign P4[10] = P3[10] & P3[2];
  assign G4[11] = G3[11] | (P3[11] & G3[3]);
  assign P4[11] = P3[11] & P3[3];
  assign G4[12] = G3[12] | (P3[12] & G3[4]);
  assign P4[12] = P3[12] & P3[4];
  assign G4[13] = G3[13] | (P3[13] & G3[5]);
  assign P4[13] = P3[13] & P3[5];
  assign G4[14] = G3[14] | (P3[14] & G3[6]);
  assign P4[14] = P3[14] & P3[6];
  assign G4[15] = G3[15] | (P3[15] & G3[7]);
  assign P4[15] = P3[15] & P3[7];

  // -------------------------------
  // Final Carry Computation
  // -------------------------------
  // We use the final stage (G4,P4) as the prefix result.
  // Define a carry vector C[0..16] where C[0] = Cin and for i = 0 to 15:
  //   C[i+1] = G4[i] or (P4[i] and Cin)
  wire [16:0] C;
  assign C[0] = Cin;
  assign C[1]  = G4[0]  | (P4[0]  & Cin);
  assign C[2]  = G4[1]  | (P4[1]  & Cin);
  assign C[3]  = G4[2]  | (P4[2]  & Cin);
  assign C[4]  = G4[3]  | (P4[3]  & Cin);
  assign C[5]  = G4[4]  | (P4[4]  & Cin);
  assign C[6]  = G4[5]  | (P4[5]  & Cin);
  assign C[7]  = G4[6]  | (P4[6]  & Cin);
  assign C[8]  = G4[7]  | (P4[7]  & Cin);
  assign C[9]  = G4[8]  | (P4[8]  & Cin);
  assign C[10] = G4[9]  | (P4[9]  & Cin);
  assign C[11] = G4[10] | (P4[10] & Cin);
  assign C[12] = G4[11] | (P4[11] & Cin);
  assign C[13] = G4[12] | (P4[12] & Cin);
  assign C[14] = G4[13] | (P4[13] & Cin);
  assign C[15] = G4[14] | (P4[14] & Cin);
  assign C[16] = G4[15] | (P4[15] & Cin);

  // -------------------------------
  // Final Sum and Carry-out
  // -------------------------------
  assign Sum  = P0 ^ C[15:0];
  assign Cout = C[16];

endmodule
