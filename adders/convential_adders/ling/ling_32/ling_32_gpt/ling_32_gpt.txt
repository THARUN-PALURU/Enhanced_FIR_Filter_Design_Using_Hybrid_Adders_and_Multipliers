`timescale 1ns / 1ps

module ling_adder_32bit (
    input [31:0] A,      // Input operand A
    input [31:0] B,      // Input operand B
    input Cin,           // Carry-in input
    output [31:0] Sum,   // Sum output
    output CarryOut      // Final carry output
);

    // Internal wires for propagate, generate, and Ling carry signals
    wire [31:0] P;  // Propagate signals
    wire [31:0] G;  // Generate signals
    wire [31:0] H;  // Ling carry signals

    // Generate Propagate and Generate terms
    assign P = A ^ B; // Propagate: P[i] = A[i] XOR B[i]
    assign G = A & B; // Generate:  G[i] = A[i] AND B[i]

    // Compute Ling carry signals explicitly
    assign H[0]  = G[0] | (P[0] & Cin);
    assign H[1]  = G[1] | (P[1] & H[0]);
    assign H[2]  = G[2] | (P[2] & H[1]);
    assign H[3]  = G[3] | (P[3] & H[2]);
    assign H[4]  = G[4] | (P[4] & H[3]);
    assign H[5]  = G[5] | (P[5] & H[4]);
    assign H[6]  = G[6] | (P[6] & H[5]);
    assign H[7]  = G[7] | (P[7] & H[6]);
    assign H[8]  = G[8] | (P[8] & H[7]);
    assign H[9]  = G[9] | (P[9] & H[8]);
    assign H[10] = G[10] | (P[10] & H[9]);
    assign H[11] = G[11] | (P[11] & H[10]);
    assign H[12] = G[12] | (P[12] & H[11]);
    assign H[13] = G[13] | (P[13] & H[12]);
    assign H[14] = G[14] | (P[14] & H[13]);
    assign H[15] = G[15] | (P[15] & H[14]);
    assign H[16] = G[16] | (P[16] & H[15]);
    assign H[17] = G[17] | (P[17] & H[16]);
    assign H[18] = G[18] | (P[18] & H[17]);
    assign H[19] = G[19] | (P[19] & H[18]);
    assign H[20] = G[20] | (P[20] & H[19]);
    assign H[21] = G[21] | (P[21] & H[20]);
    assign H[22] = G[22] | (P[22] & H[21]);
    assign H[23] = G[23] | (P[23] & H[22]);
    assign H[24] = G[24] | (P[24] & H[23]);
    assign H[25] = G[25] | (P[25] & H[24]);
    assign H[26] = G[26] | (P[26] & H[25]);
    assign H[27] = G[27] | (P[27] & H[26]);
    assign H[28] = G[28] | (P[28] & H[27]);
    assign H[29] = G[29] | (P[29] & H[28]);
    assign H[30] = G[30] | (P[30] & H[29]);
    assign H[31] = G[31] | (P[31] & H[30]);

    // Compute Sum bits
    assign Sum[0]  = P[0] ^ Cin;
    assign Sum[1]  = P[1] ^ H[0];
    assign Sum[2]  = P[2] ^ H[1];
    assign Sum[3]  = P[3] ^ H[2];
    assign Sum[4]  = P[4] ^ H[3];
    assign Sum[5]  = P[5] ^ H[4];
    assign Sum[6]  = P[6] ^ H[5];
    assign Sum[7]  = P[7] ^ H[6];
    assign Sum[8]  = P[8] ^ H[7];
    assign Sum[9]  = P[9] ^ H[8];
    assign Sum[10] = P[10] ^ H[9];
    assign Sum[11] = P[11] ^ H[10];
    assign Sum[12] = P[12] ^ H[11];
    assign Sum[13] = P[13] ^ H[12];
    assign Sum[14] = P[14] ^ H[13];
    assign Sum[15] = P[15] ^ H[14];
    assign Sum[16] = P[16] ^ H[15];
    assign Sum[17] = P[17] ^ H[16];
    assign Sum[18] = P[18] ^ H[17];
    assign Sum[19] = P[19] ^ H[18];
    assign Sum[20] = P[20] ^ H[19];
    assign Sum[21] = P[21] ^ H[20];
    assign Sum[22] = P[22] ^ H[21];
    assign Sum[23] = P[23] ^ H[22];
    assign Sum[24] = P[24] ^ H[23];
    assign Sum[25] = P[25] ^ H[24];
    assign Sum[26] = P[26] ^ H[25];
    assign Sum[27] = P[27] ^ H[26];
    assign Sum[28] = P[28] ^ H[27];
    assign Sum[29] = P[29] ^ H[28];
    assign Sum[30] = P[30] ^ H[29];
    assign Sum[31] = P[31] ^ H[30];

    // Output the final carry
    assign CarryOut = H[31];

endmodule