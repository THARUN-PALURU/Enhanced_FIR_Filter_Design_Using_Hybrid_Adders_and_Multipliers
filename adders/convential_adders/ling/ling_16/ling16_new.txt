module ling_adder_16bit (
    input [15:0] A,      // Input operand A
    input [15:0] B,      // Input operand B
    input Cin,           // Carry-in input
    output [15:0] Sum,   // Sum output
    output CarryOut      // Final carry output
);

    // Internal wires for propagate, generate, and Ling carry signals
    wire [15:0] P;  // Propagate signals
    wire [15:0] G;  // Generate signals
    wire [15:0] H;  // Ling carry signals

    // Generate Propagate and Generate terms
    assign P = A ^ B; // Propagate: P[i] = A[i] XOR B[i]
    assign G = A & B; // Generate:  G[i] = A[i] AND B[i]

    // Compute Ling carry signals explicitly
    assign H[0]  = G[0] | (P[0] & Cin);
    assign H[1]  = G[1] | (P[1] & H[0]);
    assign H[2]  = G[2] | (P[2] & H[1]);
    assign H[3]  = G[3] | (P[3] & H[2]);
    assign H[4]  = G[4] | (P[4] & H[3]);
    assign H[5]  = G[5] | (P[5] & H[4]);
    assign H[6]  = G[6] | (P[6] & H[5]);
    assign H[7]  = G[7] | (P[7] & H[6]);
    assign H[8]  = G[8] | (P[8] & H[7]);
    assign H[9]  = G[9] | (P[9] & H[8]);
    assign H[10] = G[10] | (P[10] & H[9]);
    assign H[11] = G[11] | (P[11] & H[10]);
    assign H[12] = G[12] | (P[12] & H[11]);
    assign H[13] = G[13] | (P[13] & H[12]);
    assign H[14] = G[14] | (P[14] & H[13]);
    assign H[15] = G[15] | (P[15] & H[14]);

    // Compute Sum bits
    assign Sum[0]  = P[0] ^ Cin;
    assign Sum[1]  = P[1] ^ H[0];
    assign Sum[2]  = P[2] ^ H[1];
    assign Sum[3]  = P[3] ^ H[2];
    assign Sum[4]  = P[4] ^ H[3];
    assign Sum[5]  = P[5] ^ H[4];
    assign Sum[6]  = P[6] ^ H[5];
    assign Sum[7]  = P[7] ^ H[6];
    assign Sum[8]  = P[8] ^ H[7];
    assign Sum[9]  = P[9] ^ H[8];
    assign Sum[10] = P[10] ^ H[9];
    assign Sum[11] = P[11] ^ H[10];
    assign Sum[12] = P[12] ^ H[11];
    assign Sum[13] = P[13] ^ H[12];
    assign Sum[14] = P[14] ^ H[13];
    assign Sum[15] = P[15] ^ H[14];

    // Output the final carry
    assign CarryOut = H[15];

endmodule
