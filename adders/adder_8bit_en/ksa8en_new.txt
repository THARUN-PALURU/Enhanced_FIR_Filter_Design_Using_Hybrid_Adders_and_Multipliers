

module kogge_stone_8bit_en (
    input  [7:0] A,
    input  [7:0] B,
    input        Cin,
    input        enable,
    output [7:0] Sum,
    output       Cout
);

    // Stage 0: Initial generate and propagate.
    wire [7:0] G0, P0;
    assign G0 = A & B;
    assign P0 = A ^ B;

    // Stage 1: Offset = 1.
    wire [7:0] G1, P1;
    assign G1[0] = G0[0];
    assign P1[0] = P0[0];
    assign G1[1] = G0[1] | (P0[1] & G0[0]);
    assign P1[1] = P0[1] & P0[0];
    assign G1[2] = G0[2] | (P0[2] & G0[1]);
    assign P1[2] = P0[2] & P0[1];
    assign G1[3] = G0[3] | (P0[3] & G0[2]);
    assign P1[3] = P0[3] & P0[2];
    assign G1[4] = G0[4] | (P0[4] & G0[3]);
    assign P1[4] = P0[4] & P0[3];
    assign G1[5] = G0[5] | (P0[5] & G0[4]);
    assign P1[5] = P0[5] & P0[4];
    assign G1[6] = G0[6] | (P0[6] & G0[5]);
    assign P1[6] = P0[6] & P0[5];
    assign G1[7] = G0[7] | (P0[7] & G0[6]);
    assign P1[7] = P0[7] & P0[6];

    // Stage 2: Offset = 2.
    wire [7:0] G2, P2;
    assign G2[0] = G1[0];
    assign P2[0] = P1[0];
    assign G2[1] = G1[1];
    assign P2[1] = P1[1];
    assign G2[2] = G1[2] | (P1[2] & G1[0]);
    assign P2[2] = P1[2] & P1[0];
    assign G2[3] = G1[3] | (P1[3] & G1[1]);
    assign P2[3] = P1[3] & P1[1];
    assign G2[4] = G1[4] | (P1[4] & G1[2]);
    assign P2[4] = P1[4] & P1[2];
    assign G2[5] = G1[5] | (P1[5] & G1[3]);
    assign P2[5] = P1[5] & P1[3];
    assign G2[6] = G1[6] | (P1[6] & G1[4]);
    assign P2[6] = P1[6] & P1[4];
    assign G2[7] = G1[7] | (P1[7] & G1[5]);
    assign P2[7] = P1[7] & P1[5];

    // Stage 3: Offset = 4.
    wire [7:0] G3, P3;
    assign G3[0] = G2[0];
    assign P3[0] = P2[0];
    assign G3[1] = G2[1];
    assign P3[1] = P2[1];
    assign G3[2] = G2[2];
    assign P3[2] = P2[2];
    assign G3[3] = G2[3];
    assign P3[3] = P2[3];
    assign G3[4] = G2[4] | (P2[4] & G2[0]);
    assign P3[4] = P2[4] & P2[0];
    assign G3[5] = G2[5] | (P2[5] & G2[1]);
    assign P3[5] = P2[5] & P2[1];
    assign G3[6] = G2[6] | (P2[6] & G2[2]);
    assign P3[6] = P2[6] & P2[2];
    assign G3[7] = G2[7] | (P2[7] & G2[3]);
    assign P3[7] = P2[7] & P2[3];

    // Final carry vector C[0..8]:
    // C[0] = Cin; for i = 0 to 7, C[i+1] = G3[i] OR (P3[i] & Cin).
    wire [8:0] C;
    assign C[0] = Cin;
    assign C[1] = G3[0] | (P3[0] & Cin);
    assign C[2] = G3[1] | (P3[1] & Cin);
    assign C[3] = G3[2] | (P3[2] & Cin);
    assign C[4] = G3[3] | (P3[3] & Cin);
    assign C[5] = G3[4] | (P3[4] & Cin);
    assign C[6] = G3[5] | (P3[5] & Cin);
    assign C[7] = G3[6] | (P3[6] & Cin);
    assign C[8] = G3[7] | (P3[7] & Cin);

    // Compute the sum bits.
    wire [7:0] computed_sum;
    assign computed_sum = P0 ^ C[7:0];
    wire computed_cout;
    assign computed_cout = C[8];

    reg [7:0] out_sum;
    reg       out_cout;
    always @(*) begin
        if (enable) begin
            out_sum  = computed_sum;
            out_cout = computed_cout;
        end else begin
            out_sum  = 8'd0;
            out_cout = 1'b0;
        end
    end

    assign Sum  = out_sum;
    assign Cout = out_cout;

endmodule