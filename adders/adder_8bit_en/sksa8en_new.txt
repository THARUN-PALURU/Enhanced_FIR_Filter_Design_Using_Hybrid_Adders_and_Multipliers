

module sparse_kogge_stone_adder_8_en (
    input  [7:0] a,
    input  [7:0] b,
    input         cin,
    input         enable,
    output [7:0] sum,
    output        cout
);

    // Stage 0: Precompute generate and propagate signals.
    wire [7:0] g0, p0;
    assign g0 = a & b;
    assign p0 = a ^ b;

    // Stage 1: Offset = 1.
    wire [7:0] g1, p1;
    assign g1[0] = g0[0] | (p0[0] & cin);
    assign p1[0] = p0[0];
    assign g1[1] = g0[1] | (p0[1] & g1[0]);
    assign p1[1] = p0[1] & p1[0];
    assign g1[2] = g0[2] | (p0[2] & g1[1]);
    assign p1[2] = p0[2] & p1[1];
    assign g1[3] = g0[3] | (p0[3] & g1[2]);
    assign p1[3] = p0[3] & p1[2];
    assign g1[4] = g0[4] | (p0[4] & g1[3]);
    assign p1[4] = p0[4] & p1[3];
    assign g1[5] = g0[5] | (p0[5] & g1[4]);
    assign p1[5] = p0[5] & p1[4];
    assign g1[6] = g0[6] | (p0[6] & g1[5]);
    assign p1[6] = p0[6] & p1[5];
    assign g1[7] = g0[7] | (p0[7] & g1[6]);
    assign p1[7] = p0[7] & p1[6];

    // Stage 2: Offset = 2.
    wire [7:0] g2, p2;
    assign g2[0] = g1[0];
    assign p2[0] = p1[0];
    assign g2[1] = g1[1];
    assign p2[1] = p1[1];
    assign g2[2] = g1[2] | (p1[2] & g1[0]);
    assign p2[2] = p1[2] & p1[0];
    assign g2[3] = g1[3] | (p1[3] & g1[1]);
    assign p2[3] = p1[3] & p1[1];
    assign g2[4] = g1[4] | (p1[4] & g1[2]);
    assign p2[4] = p1[4] & p1[2];
    assign g2[5] = g1[5] | (p1[5] & g1[3]);
    assign p2[5] = p1[5] & p1[3];
    assign g2[6] = g1[6] | (p1[6] & g1[4]);
    assign p2[6] = p1[6] & p1[4];
    assign g2[7] = g1[7] | (p1[7] & g1[5]);
    assign p2[7] = p1[7] & p1[5];

    // Stage 3: Offset = 4.
    wire [7:0] g3, p3;
    assign g3[0] = g2[0];
    assign p3[0] = p2[0];
    assign g3[1] = g2[1];
    assign p3[1] = p2[1];
    assign g3[2] = g2[2];
    assign p3[2] = p2[2];
    assign g3[3] = g2[3];
    assign p3[3] = p2[3];
    assign g3[4] = g2[4] | (p2[4] & g2[0]);
    assign p3[4] = p2[4] & p2[0];
    assign g3[5] = g2[5] | (p2[5] & g2[1]);
    assign p3[5] = p2[5] & p2[1];
    assign g3[6] = g2[6] | (p2[6] & g2[2]);
    assign p3[6] = p2[6] & p2[2];
    assign g3[7] = g2[7] | (p2[7] & g2[3]);
    assign p3[7] = p2[7] & p2[3];

    // Compute final sum and carry.
    // Sum[0] = p0[0] XOR cin; for i>=1, Sum[i] = p0[i] XOR g3[i-1].
    wire [7:0] computed_sum;
    assign computed_sum[0] = p0[0] ^ cin;
    assign computed_sum[1] = p0[1] ^ g3[0];
    assign computed_sum[2] = p0[2] ^ g3[1];
    assign computed_sum[3] = p0[3] ^ g3[2];
    assign computed_sum[4] = p0[4] ^ g3[3];
    assign computed_sum[5] = p0[5] ^ g3[4];
    assign computed_sum[6] = p0[6] ^ g3[5];
    assign computed_sum[7] = p0[7] ^ g3[6];
    wire computed_cout;
    assign computed_cout = g3[7];

    reg [7:0] out_sum;
    reg       out_cout;
    always @(*) begin
        if (enable) begin
            out_sum  = computed_sum;
            out_cout = computed_cout;
        end else begin
            out_sum  = 8'd0;
            out_cout = 1'b0;
        end
    end

    assign sum  = out_sum;
    assign cout = out_cout;

endmodule
