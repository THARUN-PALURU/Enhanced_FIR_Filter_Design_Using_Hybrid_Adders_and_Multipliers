`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 24.03.2025
// Design Name: Combinational Hybrid Adder (Signed) with clk
// Module Name: hyd_adr32_sig_clk
// Project Name: testing_hyd_adr_clk
// Description: 32-bit signed hybrid adder that treats the lower 16 bits of the
//              32-bit operands as unsigned (to preserve their bit patterns)
//              while the upper 16 bits remain signed.
//              Outputs are registered (driven by clk).
//////////////////////////////////////////////////////////////////////////////////

module hyd_adr32_sig_clk (
    input  signed [31:0] A,      // 32-bit signed operand A
    input  signed [31:0] B,      // 32-bit signed operand B
    input                Cin,    // Overall carry-in
    input                enable, // Global enable (when low, outputs are forced to zero)
    input                clk,
    output signed [31:0] Sum,    // 32-bit signed sum output
    output               Cout    // Overall carry-out
);

    // Split the 32-bit operands:
    // Lower half is treated as unsigned to preserve the bit pattern.
    wire [15:0] A_low  = A[15:0];
    wire signed [15:0] A_high = A[31:16];
    wire [15:0] B_low  = B[15:0];
    wire signed [15:0] B_high = B[31:16];
    
    // Intermediate wires for each 16-bit block.
    wire [15:0] Sum_low;
    wire signed [15:0] Sum_high;
    wire        Cout_low, Cout_high;
    
    // Lower 16-bit adder (treating inputs as unsigned).
    ling_adder16_comb lower_adder (
        .A(A_low),
        .B(B_low),
        .Cin(Cin),
        .enable(enable),
        .clk(clk),
        .Sum(Sum_low),
        .CarryOut(Cout_low)
    );
    
    // Upper 16-bit adder (signed).
    sparse_kogge_stone_adder16_comb upper_adder (
        .a(A_high),
        .b(B_high),
        .cin(Cout_low),
        .enable(enable),
        .clk(clk),
        .sum(Sum_high),
        .cout(Cout_high)
    );
     
    // Combine the two halves into a 32-bit result.
    wire [31:0] combined_sum = {Sum_high, Sum_low};
    wire        combined_cout = Cout_high;
    
    // Registered outputs based on the enable signal.
    reg [31:0] out_Sum;
    reg        out_Cout;
    always @(posedge clk) begin
        if (enable) begin
            out_Sum  <= combined_sum;
            out_Cout <= combined_cout;
        end else begin
            out_Sum  <= 32'd0;
            out_Cout <= 1'b0;
        end
    end
    
    assign Sum  = out_Sum;
    assign Cout = out_Cout;

endmodule


//////////////////////////////
//ling32 lower adr unsigned

module ling_adder16_comb (
    input  [15:0] A,      // Unsigned 16-bit operand A (lower half)
    input  [15:0] B,      // Unsigned 16-bit operand B (lower half)
    input         Cin,    // Carry-in
    input         enable, // Enable signal
    input         clk,
    output [15:0] Sum,    // 16-bit sum output (unsigned)
    output        CarryOut // Final carry-out
);

    // Compute propagate and generate signals (bitwise).
    wire [15:0] P = A ^ B;  // Propagate
    wire [15:0] G = A & B;  // Generate

    // Compute Ling carry signals.
    wire [15:0] H;
    assign H[0]  = G[0]  | (P[0]  & Cin);
    assign H[1]  = G[1]  | (P[1]  & H[0]);
    assign H[2]  = G[2]  | (P[2]  & H[1]);
    assign H[3]  = G[3]  | (P[3]  & H[2]);
    assign H[4]  = G[4]  | (P[4]  & H[3]);
    assign H[5]  = G[5]  | (P[5]  & H[4]);
    assign H[6]  = G[6]  | (P[6]  & H[5]);
    assign H[7]  = G[7]  | (P[7]  & H[6]);
    assign H[8]  = G[8]  | (P[8]  & H[7]);
    assign H[9]  = G[9]  | (P[9]  & H[8]);
    assign H[10] = G[10] | (P[10] & H[9]);
    assign H[11] = G[11] | (P[11] & H[10]);
    assign H[12] = G[12] | (P[12] & H[11]);
    assign H[13] = G[13] | (P[13] & H[12]);
    assign H[14] = G[14] | (P[14] & H[13]);
    assign H[15] = G[15] | (P[15] & H[14]);

    // Compute the sum bits.
    wire [15:0] computed_sum;
    assign computed_sum[0]  = P[0]  ^ Cin;
    assign computed_sum[1]  = P[1]  ^ H[0];
    assign computed_sum[2]  = P[2]  ^ H[1];
    assign computed_sum[3]  = P[3]  ^ H[2];
    assign computed_sum[4]  = P[4]  ^ H[3];
    assign computed_sum[5]  = P[5]  ^ H[4];
    assign computed_sum[6]  = P[6]  ^ H[5];
    assign computed_sum[7]  = P[7]  ^ H[6];
    assign computed_sum[8]  = P[8]  ^ H[7];
    assign computed_sum[9]  = P[9]  ^ H[8];
    assign computed_sum[10] = P[10] ^ H[9];
    assign computed_sum[11] = P[11] ^ H[10];
    assign computed_sum[12] = P[12] ^ H[11];
    assign computed_sum[13] = P[13] ^ H[12];
    assign computed_sum[14] = P[14] ^ H[13];
    assign computed_sum[15] = P[15] ^ H[14];

    // Final carry-out.
    assign CarryOut = H[15];

    // Registered outputs based on enable.
    reg [15:0] out_sum;
    reg        out_carry;
    always @(posedge clk) begin
        if (enable) begin
            out_sum  <= computed_sum;
            out_carry <= CarryOut;
        end else begin
            out_sum  <= 16'd0;
            out_carry <= 1'b0;
        end
    end

    assign Sum = out_sum;

endmodule


/////////////////////////sksa16 upperadr signed

module sparse_kogge_stone_adder16_comb (
    input  signed [15:0] a,   // Signed operand a (upper half)
    input  signed [15:0] b,   // Signed operand b (upper half)
    input                cin, // Carry-in from lower adder
    input                enable,
    input                clk,
    output signed [15:0] sum, // Signed sum output
    output               cout // Carry-out
);

    // Precompute generate and propagate signals.
    wire signed [15:0] g0 = a & b;
    wire signed [15:0] p0 = a ^ b;

    // Stage 1: Span 1
    wire signed [15:0] g1, p1;
    assign g1[0] = g0[0] | (p0[0] & cin);
    assign p1[0] = p0[0];
    assign g1[1] = g0[1] | (p0[1] & g1[0]);
    assign p1[1] = p0[1] & p1[0];
    assign g1[2] = g0[2] | (p0[2] & g1[1]);
    assign p1[2] = p0[2] & p1[1];
    assign g1[3] = g0[3] | (p0[3] & g1[2]);
    assign p1[3] = p0[3] & p1[2];
    assign g1[4] = g0[4] | (p0[4] & g1[3]);
    assign p1[4] = p0[4] & p1[3];
    assign g1[5] = g0[5] | (p0[5] & g1[4]);
    assign p1[5] = p0[5] & p1[4];
    assign g1[6] = g0[6] | (p0[6] & g1[5]);
    assign p1[6] = p0[6] & p1[5];
    assign g1[7] = g0[7] | (p0[7] & g1[6]);
    assign p1[7] = p0[7] & p1[6];
    assign g1[8] = g0[8] | (p0[8] & g1[7]);
    assign p1[8] = p0[8] & p1[7];
    assign g1[9] = g0[9] | (p0[9] & g1[8]);
    assign p1[9] = p0[9] & p1[8];
    assign g1[10] = g0[10] | (p0[10] & g1[9]);
    assign p1[10] = p0[10] & p1[9];
    assign g1[11] = g0[11] | (p0[11] & g1[10]);
    assign p1[11] = p0[11] & p1[10];
    assign g1[12] = g0[12] | (p0[12] & g1[11]);
    assign p1[12] = p0[12] & p1[11];
    assign g1[13] = g0[13] | (p0[13] & g1[12]);
    assign p1[13] = p0[13] & p1[12];
    assign g1[14] = g0[14] | (p0[14] & g1[13]);
    assign p1[14] = p0[14] & p1[13];
    assign g1[15] = g0[15] | (p0[15] & g1[14]);
    assign p1[15] = p0[15] & p1[14];

    // Stage 2: Span 2
    wire signed [15:0] g2, p2;
    assign g2[0]  = g1[0];  assign p2[0]  = p1[0];
    assign g2[1]  = g1[1];  assign p2[1]  = p1[1];
    assign g2[2]  = g1[2]  | (p1[2]  & g1[0]);
    assign p2[2]  = p1[2]  & p1[0];
    assign g2[3]  = g1[3]  | (p1[3]  & g1[1]);
    assign p2[3]  = p1[3]  & p1[1];
    assign g2[4]  = g1[4]  | (p1[4]  & g1[2]);
    assign p2[4]  = p1[4]  & p1[2];
    assign g2[5]  = g1[5]  | (p1[5]  & g1[3]);
    assign p2[5]  = p1[5]  & p1[3];
    assign g2[6]  = g1[6]  | (p1[6]  & g1[4]);
    assign p2[6]  = p1[6]  & p1[4];
    assign g2[7]  = g1[7]  | (p1[7]  & g1[5]);
    assign p2[7]  = p1[7]  & p1[5];
    assign g2[8]  = g1[8]  | (p1[8]  & g1[6]);
    assign p2[8]  = p1[8]  & p1[6];
    assign g2[9]  = g1[9]  | (p1[9]  & g1[7]);
    assign p2[9]  = p1[9]  & p1[7];
    assign g2[10] = g1[10] | (p1[10] & g1[8]);
    assign p2[10] = p1[10] & p1[8];
    assign g2[11] = g1[11] | (p1[11] & g1[9]);
    assign p2[11] = p1[11] & p1[9];
    assign g2[12] = g1[12] | (p1[12] & g1[10]);
    assign p2[12] = p1[12] & p1[10];
    assign g2[13] = g1[13] | (p1[13] & g1[11]);
    assign p2[13] = p1[13] & p1[11];
    assign g2[14] = g1[14] | (p1[14] & g1[12]);
    assign p2[14] = p1[14] & p1[12];
    assign g2[15] = g1[15] | (p1[15] & g1[13]);
    assign p2[15] = p1[15] & p1[13];

    // Stage 3: Span 4
    wire signed [15:0] g3, p3;
    assign g3[0]  = g2[0];  assign p3[0]  = p2[0];
    assign g3[1]  = g2[1];  assign p3[1]  = p2[1];
    assign g3[2]  = g2[2];  assign p3[2]  = p2[2];
    assign g3[3]  = g2[3];  assign p3[3]  = p2[3];
    assign g3[4]  = g2[4]  | (p2[4]  & g2[0]);
    assign p3[4]  = p2[4]  & p2[0];
    assign g3[5]  = g2[5]  | (p2[5]  & g2[1]);
    assign p3[5]  = p2[5]  & p2[1];
    assign g3[6]  = g2[6]  | (p2[6]  & g2[2]);
    assign p3[6]  = p2[6]  & p2[2];
    assign g3[7]  = g2[7]  | (p2[7]  & g2[3]);
    assign p3[7]  = p2[7]  & p2[3];
    assign g3[8]  = g2[8]  | (p2[8]  & g2[4]);
    assign p3[8]  = p2[8]  & p2[4];
    assign g3[9]  = g2[9]  | (p2[9]  & g2[5]);
    assign p3[9]  = p2[9]  & p2[5];
    assign g3[10] = g2[10] | (p2[10] & g2[6]);
    assign p3[10] = p2[10] & p2[6];
    assign g3[11] = g2[11] | (p2[11] & g2[7]);
    assign p3[11] = p2[11] & p2[7];
    assign g3[12] = g2[12] | (p2[12] & g2[8]);
    assign p3[12] = p2[12] & p2[8];
    assign g3[13] = g2[13] | (p2[13] & g2[9]);
    assign p3[13] = p2[13] & p2[9];
    assign g3[14] = g2[14] | (p2[14] & g2[10]);
    assign p3[14] = p2[14] & p2[10];
    assign g3[15] = g2[15] | (p2[15] & g2[11]);
    assign p3[15] = p2[15] & p2[11];

    // Stage 4: Span 8
    wire signed [15:0] g4, p4;
    assign g4[0]  = g3[0];  assign p4[0]  = p3[0];
    assign g4[1]  = g3[1];  assign p4[1]  = p3[1];
    assign g4[2]  = g3[2];  assign p4[2]  = p3[2];
    assign g4[3]  = g3[3];  assign p4[3]  = p3[3];
    assign g4[4]  = g3[4];  assign p4[4]  = p3[4];
    assign g4[5]  = g3[5];  assign p4[5]  = p3[5];
    assign g4[6]  = g3[6];  assign p4[6]  = p3[6];
    assign g4[7]  = g3[7];  assign p4[7]  = p3[7];
    assign g4[8]  = g3[8]  | (p3[8]  & g3[0]);
    assign p4[8]  = p3[8]  & p3[0];
    assign g4[9]  = g3[9]  | (p3[9]  & g3[1]);
    assign p4[9]  = p3[9]  & p3[1];
    assign g4[10] = g3[10] | (p3[10] & g3[2]);
    assign p4[10] = p3[10] & p3[2];
    assign g4[11] = g3[11] | (p3[11] & g3[3]);
    assign p4[11] = p3[11] & p3[3];
    assign g4[12] = g3[12] | (p3[12] & g3[4]);
    assign p4[12] = p3[12] & p3[4];
    assign g4[13] = g3[13] | (p3[13] & g3[5]);
    assign p4[13] = p3[13] & p3[5];
    assign g4[14] = g3[14] | (p3[14] & g3[6]);
    assign p4[14] = p3[14] & p3[6];
    assign g4[15] = g3[15] | (p3[15] & g3[7]);
    assign p4[15] = p3[15] & p3[7];

    // Compute final sum and carry-out.
    wire signed [15:0] computed_sum;
    assign computed_sum[0]  = p0[0] ^ cin;
    assign computed_sum[1]  = p0[1] ^ g4[0];
    assign computed_sum[2]  = p0[2] ^ g4[1];
    assign computed_sum[3]  = p0[3] ^ g4[2];
    assign computed_sum[4]  = p0[4] ^ g4[3];
    assign computed_sum[5]  = p0[5] ^ g4[4];
    assign computed_sum[6]  = p0[6] ^ g4[5];
    assign computed_sum[7]  = p0[7] ^ g4[6];
    assign computed_sum[8]  = p0[8] ^ g4[7];
    assign computed_sum[9]  = p0[9] ^ g4[8];
    assign computed_sum[10] = p0[10] ^ g4[9];
    assign computed_sum[11] = p0[11] ^ g4[10];
    assign computed_sum[12] = p0[12] ^ g4[11];
    assign computed_sum[13] = p0[13] ^ g4[12];
    assign computed_sum[14] = p0[14] ^ g4[13];
    assign computed_sum[15] = p0[15] ^ g4[14];
    wire computed_cout = g4[15];

    // Registered outputs based on enable.
    reg [15:0] out_sum;
    reg        out_cout;
    always @(posedge clk) begin
        if (enable) begin
            out_sum  <= computed_sum;
            out_cout <= computed_cout;
        end else begin
            out_sum  <= 16'd0;
            out_cout <= 1'b0;
        end
    end

    assign sum  = out_sum;
    assign cout = out_cout;
    
endmodule
