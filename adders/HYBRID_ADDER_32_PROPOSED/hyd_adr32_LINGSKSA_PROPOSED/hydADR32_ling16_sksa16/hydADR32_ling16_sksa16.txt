
module hydADR32_ling16_sksa16 (
    input  [31:0] A,         // 32-bit operand A
    input  [31:0] B,         // 32-bit operand B
    input         Cin,       // Overall carry-in
    input         enable,    // Global enable (or power gating) signal
    output [31:0] Sum,       // 32-bit sum output
    output        Cout       // Overall carry-out
);

    //--------------------------------------------------------------------------
    // Split the 32-bit operands into lower and upper 16-bit halves.
    //--------------------------------------------------------------------------
    wire [15:0] A_low, A_high;
    wire [15:0] B_low, B_high;
    
    assign A_low  = A[15:0];
    assign A_high = A[31:16];
    assign B_low  = B[15:0];
    assign B_high = B[31:16];
    
    //--------------------------------------------------------------------------
    // Wires for each 16-bit block.
    //--------------------------------------------------------------------------
    wire [15:0] Sum_low, Sum_high;
    wire        Cout_low, Cout_high;
    
    //--------------------------------------------------------------------------
    // Lower 16-bit adder using a Ling architecture.
    // Ling adders are known for having reduced logic levels (lower delay/power).
    // The enable signal is passed directly to the Ling adder.
    //--------------------------------------------------------------------------
     ling_adder16_en lower_adder (
        .A(A_low),
        .B(B_low),
        .Cin(Cin),
        .enable(enable),
        .Sum(Sum_low),
        .CarryOut(Cout_low)
    );
    
   
    sparse_kogge_stone_adder_16_en upper_adder (
        .a(A_high),
        .b(B_high),
        .cin(Cout_low),
        .enable(enable),
        .sum(Sum_high),
        .cout(Cout_high)
    );
    
    //--------------------------------------------------------------------------
    // Combine the two halves into a 32-bit result.
    // First, combine the two halves into internal wires.
    //--------------------------------------------------------------------------
    wire [31:0] combined_sum;
    wire        combined_cout;
    
    assign combined_sum  = {Sum_high, Sum_low};
    assign combined_cout = Cout_high;
    
    //--------------------------------------------------------------------------
    // Use an always block to drive the final outputs based on the enable signal.
    // If enable is high, the outputs reflect the combined result.
    // Otherwise, the outputs are forced to zero.
    //--------------------------------------------------------------------------
    reg [31:0] out_Sum;
    reg        out_Cout;
    always @(*) begin
        if (enable) begin
            out_Sum  = combined_sum;
            out_Cout = combined_cout;
        end else begin
            out_Sum  = 32'd0;
            out_Cout = 1'b0;
        end
    end
    
    assign Sum  = out_Sum;
    assign Cout = out_Cout;

endmodule