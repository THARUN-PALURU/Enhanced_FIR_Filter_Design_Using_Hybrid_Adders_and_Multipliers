module hybAdr16_ling8_sksa8 (
    input  [15:0] A,
    input  [15:0] B,
    input         Cin,
    output [15:0] Sum,
    output        Cout
);

    wire [7:0] A_low, A_high;
    wire [7:0] B_low, B_high;
    
    assign A_low  = A[7:0];
    assign A_high = A[15:8];
    assign B_low  = B[7:0];
    assign B_high = B[15:8];
    
    wire [7:0] Sum_low, Sum_high;
    wire       Cout_low, Cout_high;
    
    ling_adder_8bit lower_adder (
        .A(A_low),
        .B(B_low),
        .Cin(Cin),
        .Sum(Sum_low),
        .CarryOut(Cout_low)
    );
    
    sparse_kogge_stone_8bit upper_adder (
        .A(A_high),
        .B(B_high),
        .Cin(Cout_low),
        .Sum(Sum_high),
        .Cout(Cout_high)
    );
    
    wire [15:0] combined_sum;
    wire        combined_cout;
    
    assign combined_sum  = {Sum_high, Sum_low};
    assign combined_cout = Cout_high;
   
    
    assign Sum  = combined_sum;
    assign Cout = combined_cout;

endmodule

////////////////////////ling8

module ling_adder_8bit (
    input  [7:0] A,       // Input operand A
    input  [7:0] B,       // Input operand B
    input         Cin,     // Carry-in input
    output [7:0] Sum,     // Sum output
    output        CarryOut // Final carry output
);

    // Internal wires for propagate, generate, and Ling carry signals.
    wire [7:0] P;  // Propagate signals: P = A XOR B.
    wire [7:0] G;  // Generate signals:  G = A AND B.
    wire [7:0] H;  // Ling carry signals.

    assign P = A ^ B;
    assign G = A & B;

    // Compute Ling carry signals explicitly.
    assign H[0] = G[0] | (P[0] & Cin);
    assign H[1] = G[1] | (P[1] & H[0]);
    assign H[2] = G[2] | (P[2] & H[1]);
    assign H[3] = G[3] | (P[3] & H[2]);
    assign H[4] = G[4] | (P[4] & H[3]);
    assign H[5] = G[5] | (P[5] & H[4]);
    assign H[6] = G[6] | (P[6] & H[5]);
    assign H[7] = G[7] | (P[7] & H[6]);

    // Compute Sum bits.
    // Sum[0] = P[0] XOR Cin; for i>=1, Sum[i] = P[i] XOR H[i-1].
    wire [7:0] computed_sum;
    assign computed_sum[0] = P[0] ^ Cin;
    assign computed_sum[1] = P[1] ^ H[0];
    assign computed_sum[2] = P[2] ^ H[1];
    assign computed_sum[3] = P[3] ^ H[2];
    assign computed_sum[4] = P[4] ^ H[3];
    assign computed_sum[5] = P[5] ^ H[4];
    assign computed_sum[6] = P[6] ^ H[5];
    assign computed_sum[7] = P[7] ^ H[6];

    // Final carry-out is H[7].
    wire computed_carry;
    assign computed_carry = H[7];

             assign Sum  = computed_sum;
             assign CarryOut = computed_carry;
      
endmodule


////////////////////////////sksa8



module sparse_kogge_stone_adder_8bit (
    input  [7:0] a,
    input  [7:0] b,
    input         cin,
    output [7:0] sum,
    output        cout
);

    // Stage 0: Precompute generate and propagate signals.
    wire [7:0] g0, p0;
    assign g0 = a & b;
    assign p0 = a ^ b;

    // Stage 1: Offset = 1.
    wire [7:0] g1, p1;
    assign g1[0] = g0[0] | (p0[0] & cin);
    assign p1[0] = p0[0];
    assign g1[1] = g0[1] | (p0[1] & g1[0]);
    assign p1[1] = p0[1] & p1[0];
    assign g1[2] = g0[2] | (p0[2] & g1[1]);
    assign p1[2] = p0[2] & p1[1];
    assign g1[3] = g0[3] | (p0[3] & g1[2]);
    assign p1[3] = p0[3] & p1[2];
    assign g1[4] = g0[4] | (p0[4] & g1[3]);
    assign p1[4] = p0[4] & p1[3];
    assign g1[5] = g0[5] | (p0[5] & g1[4]);
    assign p1[5] = p0[5] & p1[4];
    assign g1[6] = g0[6] | (p0[6] & g1[5]);
    assign p1[6] = p0[6] & p1[5];
    assign g1[7] = g0[7] | (p0[7] & g1[6]);
    assign p1[7] = p0[7] & p1[6];

    // Stage 2: Offset = 2.
    wire [7:0] g2, p2;
    assign g2[0] = g1[0];
    assign p2[0] = p1[0];
    assign g2[1] = g1[1];
    assign p2[1] = p1[1];
    assign g2[2] = g1[2] | (p1[2] & g1[0]);
    assign p2[2] = p1[2] & p1[0];
    assign g2[3] = g1[3] | (p1[3] & g1[1]);
    assign p2[3] = p1[3] & p1[1];
    assign g2[4] = g1[4] | (p1[4] & g1[2]);
    assign p2[4] = p1[4] & p1[2];
    assign g2[5] = g1[5] | (p1[5] & g1[3]);
    assign p2[5] = p1[5] & p1[3];
    assign g2[6] = g1[6] | (p1[6] & g1[4]);
    assign p2[6] = p1[6] & p1[4];
    assign g2[7] = g1[7] | (p1[7] & g1[5]);
    assign p2[7] = p1[7] & p1[5];

    // Stage 3: Offset = 4.
    wire [7:0] g3, p3;
    assign g3[0] = g2[0];
    assign p3[0] = p2[0];
    assign g3[1] = g2[1];
    assign p3[1] = p2[1];
    assign g3[2] = g2[2];
    assign p3[2] = p2[2];
    assign g3[3] = g2[3];
    assign p3[3] = p2[3];
    assign g3[4] = g2[4] | (p2[4] & g2[0]);
    assign p3[4] = p2[4] & p2[0];
    assign g3[5] = g2[5] | (p2[5] & g2[1]);
    assign p3[5] = p2[5] & p2[1];
    assign g3[6] = g2[6] | (p2[6] & g2[2]);
    assign p3[6] = p2[6] & p2[2];
    assign g3[7] = g2[7] | (p2[7] & g2[3]);
    assign p3[7] = p2[7] & p2[3];

    // Compute final sum and carry.
    // Sum[0] = p0[0] XOR cin; for i>=1, Sum[i] = p0[i] XOR g3[i-1].
    wire [7:0] computed_sum;
    assign computed_sum[0] = p0[0] ^ cin;
    assign computed_sum[1] = p0[1] ^ g3[0];
    assign computed_sum[2] = p0[2] ^ g3[1];
    assign computed_sum[3] = p0[3] ^ g3[2];
    assign computed_sum[4] = p0[4] ^ g3[3];
    assign computed_sum[5] = p0[5] ^ g3[4];
    assign computed_sum[6] = p0[6] ^ g3[5];
    assign computed_sum[7] = p0[7] ^ g3[6];
    wire computed_cout;
    assign computed_cout = g3[7];

 
    assign sum  = computed_sum;
    assign cout = computed_cout;

endmodule
