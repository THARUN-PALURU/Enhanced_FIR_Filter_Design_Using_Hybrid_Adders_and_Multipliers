

module hybAdr16_SKSA8_BKA8 (
    input  [15:0] A,
    input  [15:0] B,
    input         Cin,
    output [15:0] Sum,
    output        Cout
);

    wire [7:0] A_low, A_high;
    wire [7:0] B_low, B_high;
    
    assign A_low  = A[7:0];
    assign A_high = A[15:8];
    assign B_low  = B[7:0];
    assign B_high = B[15:8];
    
    wire [7:0] Sum_low, Sum_high;
    wire       Cout_low, Cout_high;
    
    sparse_kogge_stone_adder_8bit  lower_adder (
        .a(A_low),
        .b(B_low),
        .cin(Cin),
        .sum(Sum_low),
        .cout(Cout_low)
    );
    
    brent_kung_adder_8bit upper_adder (
        .a(A_high),
        .b(B_high),
        .cin(Cout_low),
        .sum(Sum_high),
        .cout(Cout_high)
    );
    
    wire [15:0] combined_sum;
    wire        combined_cout;
    
    assign combined_sum  = {Sum_high, Sum_low};
    assign combined_cout = Cout_high;
    
    
    assign Sum  = combined_sum;
    assign Cout = combined_cout;

endmodule


/////////////////////////sksa8


module sparse_kogge_stone_adder_8bit (
    input  [7:0] a,
    input  [7:0] b,
    input         cin,
    output [7:0] sum,
    output        cout
);

    // Stage 0: Precompute generate and propagate signals.
    wire [7:0] g0, p0;
    assign g0 = a & b;
    assign p0 = a ^ b;

    // Stage 1: Offset = 1.
    wire [7:0] g1, p1;
    assign g1[0] = g0[0] | (p0[0] & cin);
    assign p1[0] = p0[0];
    assign g1[1] = g0[1] | (p0[1] & g1[0]);
    assign p1[1] = p0[1] & p1[0];
    assign g1[2] = g0[2] | (p0[2] & g1[1]);
    assign p1[2] = p0[2] & p1[1];
    assign g1[3] = g0[3] | (p0[3] & g1[2]);
    assign p1[3] = p0[3] & p1[2];
    assign g1[4] = g0[4] | (p0[4] & g1[3]);
    assign p1[4] = p0[4] & p1[3];
    assign g1[5] = g0[5] | (p0[5] & g1[4]);
    assign p1[5] = p0[5] & p1[4];
    assign g1[6] = g0[6] | (p0[6] & g1[5]);
    assign p1[6] = p0[6] & p1[5];
    assign g1[7] = g0[7] | (p0[7] & g1[6]);
    assign p1[7] = p0[7] & p1[6];

    // Stage 2: Offset = 2.
    wire [7:0] g2, p2;
    assign g2[0] = g1[0];
    assign p2[0] = p1[0];
    assign g2[1] = g1[1];
    assign p2[1] = p1[1];
    assign g2[2] = g1[2] | (p1[2] & g1[0]);
    assign p2[2] = p1[2] & p1[0];
    assign g2[3] = g1[3] | (p1[3] & g1[1]);
    assign p2[3] = p1[3] & p1[1];
    assign g2[4] = g1[4] | (p1[4] & g1[2]);
    assign p2[4] = p1[4] & p1[2];
    assign g2[5] = g1[5] | (p1[5] & g1[3]);
    assign p2[5] = p1[5] & p1[3];
    assign g2[6] = g1[6] | (p1[6] & g1[4]);
    assign p2[6] = p1[6] & p1[4];
    assign g2[7] = g1[7] | (p1[7] & g1[5]);
    assign p2[7] = p1[7] & p1[5];

    // Stage 3: Offset = 4.
    wire [7:0] g3, p3;
    assign g3[0] = g2[0];
    assign p3[0] = p2[0];
    assign g3[1] = g2[1];
    assign p3[1] = p2[1];
    assign g3[2] = g2[2];
    assign p3[2] = p2[2];
    assign g3[3] = g2[3];
    assign p3[3] = p2[3];
    assign g3[4] = g2[4] | (p2[4] & g2[0]);
    assign p3[4] = p2[4] & p2[0];
    assign g3[5] = g2[5] | (p2[5] & g2[1]);
    assign p3[5] = p2[5] & p2[1];
    assign g3[6] = g2[6] | (p2[6] & g2[2]);
    assign p3[6] = p2[6] & p2[2];
    assign g3[7] = g2[7] | (p2[7] & g2[3]);
    assign p3[7] = p2[7] & p2[3];

    // Compute final sum and carry.
    // Sum[0] = p0[0] XOR cin; for i>=1, Sum[i] = p0[i] XOR g3[i-1].
    wire [7:0] computed_sum;
    assign computed_sum[0] = p0[0] ^ cin;
    assign computed_sum[1] = p0[1] ^ g3[0];
    assign computed_sum[2] = p0[2] ^ g3[1];
    assign computed_sum[3] = p0[3] ^ g3[2];
    assign computed_sum[4] = p0[4] ^ g3[3];
    assign computed_sum[5] = p0[5] ^ g3[4];
    assign computed_sum[6] = p0[6] ^ g3[5];
    assign computed_sum[7] = p0[7] ^ g3[6];
    wire computed_cout;
    assign computed_cout = g3[7];

 
    assign sum  = computed_sum;
    assign cout = computed_cout;

endmodule



/////////////////bka8

module brent_kung_adder_8bit (
    input  [7:0] a,
    input  [7:0] b,
    input        cin,
    output [7:0] sum,
    output       cout
);

    // Preprocessing: Compute bit-level generate and propagate.
    wire [7:0] g, p;
    assign g = a & b;
    assign p = a ^ b;

    // Effective generate for bit 0 (includes cin)
    wire g0_eff;
    assign g0_eff = g[0] | (p[0] & cin);

    // --- Up-Sweep Phase for lower 8 bits ---
    // Stage 1: Form adjacent pairs.
    // Bits [1:0]:
    wire g1_0, p1_0;
    assign g1_0 = g[1] | (p[1] & g0_eff);
    assign p1_0 = p[1] & p[0];
    // Bits [3:2]:
    wire g3_2, p3_2;
    assign g3_2 = g[3] | (p[3] & g[2]);
    assign p3_2 = p[3] & p[2];

    // Stage 2: Combine for bits 0-3.
    wire g3_0, p3_0;
    assign g3_0 = g3_2 | (p3_2 & g1_0);
    assign p3_0 = p3_2 & p1_0;

    // Stage 1 for upper nibble (bits 4-7):
    // Bits [5:4]:
    wire g5_4, p5_4;
    assign g5_4 = g[5] | (p[5] & g[4]);
    assign p5_4 = p[5] & p[4];
    // Bits [7:6]:
    wire g7_6, p7_6;
    assign g7_6 = g[7] | (p[7] & g[6]);
    assign p7_6 = p[7] & p[6];

    // Stage 2 for upper nibble:
    wire g7_4, p7_4;
    assign g7_4 = g7_6 | (p7_6 & g5_4);
    assign p7_4 = p7_6 & p5_4;

    // Stage 3: Combine lower and upper halves.
    wire g7_0, p7_0;
    assign g7_0 = g7_4 | (p7_4 & g3_0);
    assign p7_0 = p7_4 & p3_0;

    // --- Down-Sweep Phase ---
    // Build a carry vector c[0..8]:
    wire [8:0] c;
    assign c[0] = cin;
    assign c[1] = g0_eff;
    assign c[2] = g1_0;
    assign c[3] = g[2]  | (p[2]  & c[2]);
    assign c[4] = g3_0;
    assign c[5] = g[4]  | (p[4]  & c[4]);
    assign c[6] = g[5]  | (p[5]  & c[5]);
    assign c[7] = g[6]  | (p[6]  & c[6]);
    assign c[8] = g7_0;  // overall generate for bits [0:7]

    // Compute sum bits.
    wire [7:0] computed_sum;
    assign computed_sum[0] = p[0] ^ cin;
    assign computed_sum[1] = p[1] ^ c[1];
    assign computed_sum[2] = p[2] ^ c[2];
    assign computed_sum[3] = p[3] ^ c[3];
    assign computed_sum[4] = p[4] ^ c[4];
    assign computed_sum[5] = p[5] ^ c[5];
    assign computed_sum[6] = p[6] ^ c[6];
    assign computed_sum[7] = p[7] ^ c[7];
    wire computed_cout;
    assign computed_cout = c[8];

    assign sum = computed_sum;
    assign cout = computed_cout;

endmodule

