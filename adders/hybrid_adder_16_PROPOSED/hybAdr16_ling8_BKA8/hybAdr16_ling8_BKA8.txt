

module hybAdr16_ling8_BKA8 (
    input  [15:0] A,
    input  [15:0] B,
    input         Cin,
    input         enable,
    output [15:0] Sum,
    output        Cout
);

    wire [7:0] A_low, A_high;
    wire [7:0] B_low, B_high;
    
    assign A_low  = A[7:0];
    assign A_high = A[15:8];
    assign B_low  = B[7:0];
    assign B_high = B[15:8];
    
    wire [7:0] Sum_low, Sum_high;
    wire       Cout_low, Cout_high;
    
    ling_adder_8bit_en  lower_adder (
        .A(A_low),
        .B(B_low),
        .Cin(Cin),
        .enable(enable),
        .Sum(Sum_low),
        .CarryOut(Cout_low)
    );
    
    brent_kung_adder_8_en upper_adder (
        .a(A_high),
        .b(B_high),
        .cin(Cout_low),
        .enable(enable),
        .sum(Sum_high),
        .cout(Cout_high)
    );
    
    wire [15:0] combined_sum;
    wire        combined_cout;
    
    assign combined_sum  = {Sum_high, Sum_low};
    assign combined_cout = Cout_high;
    
    reg [15:0] out_Sum;
    reg        out_Cout;
    always @(*) begin
        if (enable) begin
            out_Sum  = combined_sum;
            out_Cout = combined_cout;
        end else begin
            out_Sum  = 16'd0;
            out_Cout = 1'b0;
        end
    end
    
    assign Sum  = out_Sum;
    assign Cout = out_Cout;

endmodule
