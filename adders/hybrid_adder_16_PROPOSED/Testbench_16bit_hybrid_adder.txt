


module tb_hybrid_adder_16bit;

    // Common testbench signals
    reg  [15:0] A;
    reg  [15:0] B;
    reg Cin;
    reg enable;
    
    wire [15:0] Sum; 
    wire CarryOut;
    
    hybAdr16_ling8_ksa8 uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .enable(enable),
        .Sum(Sum),
        .Cout(CarryOut)
    );
    
    initial begin
        // Initialize inputs
        A = 16'h0000;
        B = 16'h0000;
        Cin = 0;
        enable = 0;
        #10;
        
        // Corner and Random Test Cases
        A = 16'h0000; B = 16'h0000; Cin = 1; enable = 1'b1; #10;
        check_result(0, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h0001; B = 16'h1000; Cin = 1; enable = 1'b1; #10;
        check_result(1, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h0001; B = 16'h0001; Cin = 1; enable = 1'b0; #10;
        check_result(2, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'hFFFF; B = 16'h0001; Cin = 0; enable = 1'b1; #10;
        check_result(3, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h7FFF; B = 16'h7FFF; Cin = 0; enable = 1'b1; #10;
        check_result(4, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'hABCD; B = 16'hFFFF; Cin = 1; enable = 1'b1; #10;
        check_result(5, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h8000; B = 16'h0001; Cin = 1; enable = 1'b0; #10;
        check_result(8, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h0001; B = 16'h8000; Cin = 0; enable = 1'b1; #10;
        check_result(9, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h1234; B = 16'h5678; Cin = 1; enable = 1'b1; #10;
        check_result(10, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h5555; B = 16'hAAAA; Cin = 0; enable = 1'b1; #10;
        check_result(11, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'hCDEF; B = 16'h1234; Cin = 1; enable = 1'b1; #10;
        check_result(12, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'hFFFF; B = 16'h0000; Cin = 1; enable = 1'b1; #10;
        check_result(13, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h7FFF; B = 16'h8000; Cin = 1; enable = 1'b1; #10;
        check_result(14, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'h9999; B = 16'h6666; Cin = 1; enable = 1'b1; #10;
        check_result(15, A, B, Cin, enable, {CarryOut, Sum});
               
        A = 16'hFFFF; B = 16'hFFFF; Cin = 0; enable = 1'b1; #10;
        check_result(6, A, B, Cin, enable, {CarryOut, Sum});
        
        A = 16'hFFFF; B = 16'hFFFF; Cin = 1; enable = 1'b1; #10;
        check_result(7, A, B, Cin, enable, {CarryOut, Sum});
        
        $finish;
    end

    task check_result(
        input integer test_num,
        input [15:0] a_val,
        input [15:0] b_val,
        input cin_val,
        input enable_val,
        input [16:0] result  // {CarryOut, Sum}
    );
        reg [16:0] expected;
        begin
            if (enable_val)
                expected = a_val + b_val + cin_val;
            else
                expected = 16'h0;  // Expect zero when disabled.

            $display("Test Case %0d: A = %h, B = %h, Cin = %b, Enable = %b", test_num, a_val, b_val, cin_val, enable_val);
            $display("  Result:   Sum = %h, Cout = %b", result[15:0], result[16]);
            $display("  Expected: Sum = %h, Cout = %b", expected[15:0], expected[16]);

            if (result === expected)
                $display("  Status: Passed");
            else
                $display("  Status: Failed");
        end
    endtask

endmodule
