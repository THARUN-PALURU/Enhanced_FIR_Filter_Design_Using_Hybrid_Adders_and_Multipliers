`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 13.03.2025 10:52:05
// Design Name: 
// Module Name: FIR_Filter_16tap
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 16-tap FIR filter using ECG-optimized low-pass coefficients.
//              Each tap's product is generated using a hyd_mul16_4chain multiplier.
//              The 16 products are summed using a parallel-serial combination tree:
//              - Stage 1: Four serial chains, each adding 4 products.
//              - Stage 2: The four chain results are combined in two groups.
//              - Stage 3: The two group results are added to produce the final sum.
//              The final sum is registered on the rising clock edge and forced to zero 
//              when reset or enable is low.
// 
// Dependencies: 
//  - DFF module (active-high synchronous reset and enable)
//  - hyd_mul16_4chain multiplier modules
//  - hyd_adr32 adder module (which uses ling_adder16_en and 
//    sparse_kogge_stone_adder_16_en internally)
// 
// Revision:
// Revision 0.05 - Updated delay elements to use enable logic.
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module FIR_Filter_16tap #(parameter N = 16)(
    input clk, reset, enable,
    input [N-1:0] data_in,
    output reg [31:0] data_out  // Final result is 32 bits.
);

  //-------------------------------------------------------------------------
  // Coefficient definitions for an ECG low-pass optimized filter.
  // These symmetric coefficients provide a linear-phase response.
  //-------------------------------------------------------------------------
  wire [15:0] b0  = 16'h0003; 
  wire [15:0] b1  = 16'h0007; 
  wire [15:0] b2  = 16'h000C; 
  wire [15:0] b3  = 16'h0012;
  wire [15:0] b4  = 16'h0019;
  wire [15:0] b5  = 16'h0020;
  wire [15:0] b6  = 16'h0026;
  wire [15:0] b7  = 16'h002A;
  wire [15:0] b8  = 16'h002A;
  wire [15:0] b9  = 16'h0026;
  wire [15:0] b10 = 16'h0020;
  wire [15:0] b11 = 16'h0019;
  wire [15:0] b12 = 16'h0012;
  wire [15:0] b13 = 16'h000C;
  wire [15:0] b14 = 16'h0007;
  wire [15:0] b15 = 16'h0003;

  //-------------------------------------------------------------------------
  // Delay Elements: Instantiate DFFs for taps x[n-1] to x[n-15].
  // These store the previous input samples using the updated DFF with enable.
  //-------------------------------------------------------------------------
  wire [N-1:0] x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;

    DFF DFF0  (.clk(clk), .reset(reset), .enable(enable), .data_in(data_in), .data_delayed(x1));   // x[n-1]
    DFF DFF1  (.clk(clk), .reset(reset), .enable(enable), .data_in(x1),     .data_delayed(x2));   // x[n-2]
    DFF DFF2  (.clk(clk), .reset(reset), .enable(enable), .data_in(x2),     .data_delayed(x3));   // x[n-3]
    DFF DFF3  (.clk(clk), .reset(reset), .enable(enable), .data_in(x3),     .data_delayed(x4));   // x[n-4]
    DFF DFF4  (.clk(clk), .reset(reset), .enable(enable), .data_in(x4),     .data_delayed(x5));   // x[n-5]
    DFF DFF5  (.clk(clk), .reset(reset), .enable(enable), .data_in(x5),     .data_delayed(x6));   // x[n-6]
    DFF DFF6  (.clk(clk), .reset(reset), .enable(enable), .data_in(x6),     .data_delayed(x7));   // x[n-7]
    DFF DFF7  (.clk(clk), .reset(reset), .enable(enable), .data_in(x7),     .data_delayed(x8));   // x[n-8]
    DFF DFF8  (.clk(clk), .reset(reset), .enable(enable), .data_in(x8),     .data_delayed(x9));   // x[n-9]
    DFF DFF9  (.clk(clk), .reset(reset), .enable(enable), .data_in(x9),     .data_delayed(x10));  // x[n-10]
    DFF DFF10 (.clk(clk), .reset(reset), .enable(enable), .data_in(x10),    .data_delayed(x11));  // x[n-11]
    DFF DFF11 (.clk(clk), .reset(reset), .enable(enable), .data_in(x11),    .data_delayed(x12));  // x[n-12]
    DFF DFF12 (.clk(clk), .reset(reset), .enable(enable), .data_in(x12),    .data_delayed(x13));  // x[n-13]
    DFF DFF13 (.clk(clk), .reset(reset), .enable(enable), .data_in(x13),    .data_delayed(x14));  // x[n-14]
    DFF DFF14 (.clk(clk), .reset(reset), .enable(enable), .data_in(x14),    .data_delayed(x15));  // x[n-15]
    

  //-------------------------------------------------------------------------
  // Multiplication Stage: Each hyd_mul16_4chain multiplier produces a 32-bit product.
  // Mul0 corresponds to the product for the current sample, Mul1 for x1, etc.
  //-------------------------------------------------------------------------
  wire [31:0] Mul0, Mul1, Mul2, Mul3, Mul4, Mul5, Mul6,
              Mul7, Mul8, Mul9, Mul10, Mul11, Mul12, Mul13, Mul14, Mul15;

  hyd_mul16_4chain m0(
    .A(data_in),
    .B(b0),
    .en(enable),
    .Product(Mul0)
  );
  hyd_mul16_4chain m1(
    .A(x1),
    .B(b1),
    .en(enable),
    .Product(Mul1)
  );
  hyd_mul16_4chain m2(
    .A(x2),
    .B(b2),
    .en(enable),
    .Product(Mul2)
  );
  hyd_mul16_4chain m3(
    .A(x3),
    .B(b3),
    .en(enable),
    .Product(Mul3)
  );
  hyd_mul16_4chain m4(
    .A(x4),
    .B(b4),
    .en(enable),
    .Product(Mul4)
  );
  hyd_mul16_4chain m5(
    .A(x5),
    .B(b5),
    .en(enable),
    .Product(Mul5)
  );
  hyd_mul16_4chain m6(
    .A(x6),
    .B(b6),
    .en(enable),
    .Product(Mul6)
  );
  hyd_mul16_4chain m7(
    .A(x7),
    .B(b7),
    .en(enable),
    .Product(Mul7)
  );
  hyd_mul16_4chain m8(
    .A(x8),
    .B(b8),
    .en(enable),
    .Product(Mul8)
  );
  hyd_mul16_4chain m9(
    .A(x9),
    .B(b9),
    .en(enable),
    .Product(Mul9)
  );
  hyd_mul16_4chain m10(
    .A(x10),
    .B(b10),
    .en(enable),
    .Product(Mul10)
  );
  hyd_mul16_4chain m11(
    .A(x11),
    .B(b11),
    .en(enable),
    .Product(Mul11)
  );
  hyd_mul16_4chain m12(
    .A(x12),
    .B(b12),
    .en(enable),
    .Product(Mul12)
  );
  hyd_mul16_4chain m13(
    .A(x13),
    .B(b13),
    .en(enable),
    .Product(Mul13)
  );
  hyd_mul16_4chain m14(
    .A(x14),
    .B(b14),
    .en(enable),
    .Product(Mul14)
  );
  hyd_mul16_4chain m15(
    .A(x15),
    .B(b15),
    .en(enable),
    .Product(Mul15)
  );

  //======================================================================
  // Stage 1: 4 Chains of Partial Product Addition (Serial Addition)
  // Each chain adds 4 products serially.
  //======================================================================
  
  // Chain 1: Add Mul0, Mul1, Mul2, Mul3
  wire [31:0] chain1_0, chain1_1, chain1_final;
  wire [2:0]  chain1_cout;
  
  hyd_adr32 chain1_adder0 (
      .A(Mul0),
      .B(Mul1),
      .Cin(1'b0),
      .enable(enable),
      .Sum(chain1_0),
      .Cout(chain1_cout[0])
  );
  hyd_adr32 chain1_adder1 (
      .A(chain1_0),
      .B(Mul2),
      .Cin(chain1_cout[0]),
      .enable(enable),
      .Sum(chain1_1),
      .Cout(chain1_cout[1])
  );
  hyd_adr32 chain1_adder2 (
      .A(chain1_1),
      .B(Mul3),
      .Cin(chain1_cout[1]),
      .enable(enable),
      .Sum(chain1_final),
      .Cout(chain1_cout[2])
  );
  
  // Chain 2: Add Mul4, Mul5, Mul6, Mul7
  wire [31:0] chain2_0, chain2_1, chain2_final;
  wire [2:0]  chain2_cout;
  
  hyd_adr32 chain2_adder0 (
      .A(Mul4),
      .B(Mul5),
      .Cin(1'b0),
      .enable(enable),
      .Sum(chain2_0),
      .Cout(chain2_cout[0])
  );
  hyd_adr32 chain2_adder1 (
      .A(chain2_0),
      .B(Mul6),
      .Cin(chain2_cout[0]),
      .enable(enable),
      .Sum(chain2_1),
      .Cout(chain2_cout[1])
  );
  hyd_adr32 chain2_adder2 (
      .A(chain2_1),
      .B(Mul7),
      .Cin(chain2_cout[1]),
      .enable(enable),
      .Sum(chain2_final),
      .Cout(chain2_cout[2])
  );
  
  // Chain 3: Add Mul8, Mul9, Mul10, Mul11
  wire [31:0] chain3_0, chain3_1, chain3_final;
  wire [2:0]  chain3_cout;
  
  hyd_adr32 chain3_adder0 (
      .A(Mul8),
      .B(Mul9),
      .Cin(1'b0),
      .enable(enable),
      .Sum(chain3_0),
      .Cout(chain3_cout[0])
  );
  hyd_adr32 chain3_adder1 (
      .A(chain3_0),
      .B(Mul10),
      .Cin(chain3_cout[0]),
      .enable(enable),
      .Sum(chain3_1),
      .Cout(chain3_cout[1])
  );
  hyd_adr32 chain3_adder2 (
      .A(chain3_1),
      .B(Mul11),
      .Cin(chain3_cout[1]),
      .enable(enable),
      .Sum(chain3_final),
      .Cout(chain3_cout[2])
  );
  
  // Chain 4: Add Mul12, Mul13, Mul14, Mul15
  wire [31:0] chain4_0, chain4_1, chain4_final;
  wire [2:0]  chain4_cout;
  
  hyd_adr32 chain4_adder0 (
      .A(Mul12),
      .B(Mul13),
      .Cin(1'b0),
      .enable(enable),
      .Sum(chain4_0),
      .Cout(chain4_cout[0])
  );
  hyd_adr32 chain4_adder1 (
      .A(chain4_0),
      .B(Mul14),
      .Cin(chain4_cout[0]),
      .enable(enable),
      .Sum(chain4_1),
      .Cout(chain4_cout[1])
  );
  hyd_adr32 chain4_adder2 (
      .A(chain4_1),
      .B(Mul15),
      .Cin(chain4_cout[1]),
      .enable(enable),
      .Sum(chain4_final),
      .Cout(chain4_cout[2])
  );
  
  //======================================================================
  // Stage 2: Combine the 4 chain results in 2 groups.
  // Group 1: Chain 1 final + Chain 2 final.
  // Group 2: Chain 3 final + Chain 4 final.
  //======================================================================
  wire [31:0] group1, group2;
  
  hyd_adr32 group_adder0 (
      .A(chain1_final),
      .B(chain2_final),
      .Cin(1'b0),
      .enable(enable),
      .Sum(group1),
      .Cout()  // Carry-out not used
  );
  
  hyd_adr32 group_adder1 (
      .A(chain3_final),
      .B(chain4_final),
      .Cin(1'b0),
      .enable(enable),
      .Sum(group2),
      .Cout()  // Carry-out not used
  );
  
  //======================================================================
  // Stage 3: Final Adder: Combine group results.
  //======================================================================
  wire [31:0] final_sum;
  hyd_adr32 final_adder (
      .A(group1),
      .B(group2),
      .Cin(1'b0),
      .enable(enable),
      .Sum(final_sum),
      .Cout()  // Not used
  );
  
  //-------------------------------------------------------------------------
  // Final Output Stage:
  // The final sum is registered on the rising edge.
  // If reset or enable is low, output is forced to zero.
  //-------------------------------------------------------------------------
  always @(posedge clk) begin
      if (reset || !enable)
          data_out <= 32'd0;
      else
          data_out <= final_sum;
  end

endmodule


module DFF #(parameter N = 16)(    
    input clk, reset, enable,
    input [N-1:0] data_in,
    output [N-1:0] data_delayed
);
    reg [N-1:0] Q_reg;
    
    // Active-high synchronous reset and enable logic
    always @(posedge clk) begin
        if (reset || !enable)
            Q_reg <= {N{1'b0}}; // Reset or disable forces output to zero
        else
            Q_reg <= data_in;
    end
    
    // Output logic
    assign data_delayed = Q_reg;
endmodule
