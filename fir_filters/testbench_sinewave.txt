module fir_TB_2();


reg enable, reset;
	
	initial begin
        // Initialization.
        reset = 1;
        enable = 1;
        #20 reset = 0;
	end
	localparam N = 16;


localparam CORDIC_CLK_PERIOD = 2; 				// to create a 500 MHz CORDIC sampling clock
localparam FIR_CLK_PERIOD = 10;	  				// to create a 100 MHz lowpass filter sampling clock
localparam signed [15:0] PI_POS = 16'h 6488; 	// +pi in fixed point 1.2.13
localparam signed [15:0] PI_NEG = 16'h 9B78; 	// -pi in fixed point 1.2.13
localparam PHASE_INC_2MHz = 200; 				// phase jump for 2Mhz sine wave synthesis
localparam PHASE_INC_30MHz = 3000; 				// phase jump for 30Mhz sine wave synthesis

reg cordic_clk = 1'b0;
reg fir_clk = 1'b0;
reg phase_tvalid = 1'b0;
reg signed [15:0] phase_2MHz = 0;				// 2Mhz phase sweep, 1.2.13
reg signed [15:0] phase_30MHz = 0;				// 30Mhz phase sweep, 1.2.13
wire sincos_2MHz_tvalid;
wire signed [15:0] sin_2MHz, cos_2MHz;			// 1.1.14 2Mhz sine/cosine
wire sincos_30MHz_tvalid;
wire signed [15:0] sin_30MHz, cos_30MHz;			// 1.1.14 30Mhz sine/cosine

reg [15:0] noisy_signal = 0;					// resampled 2Mhz sine + 30Mhz sine, 1.1.14
wire signed [31:0] filtered_signal;				// Filtered signal output from FIR lowpass filter


//synthesis 2Mhz sine
cordic_0 cordic_inst_0(
	.aclk					(cordic_clk),
	.s_axis_phase_tvalid	(phase_tvalid),
	.s_axis_phase_tdata		(phase_2MHz),
	.m_axis_dout_tvalid		(sincos_2MHz_tvalid),
	.m_axis_dout_tdata		({sin_2MHz,cos_2MHz})
);

//synthesis 30Mhz sine
cordic_0 cordic_inst_1(
	.aclk					(cordic_clk),
	.s_axis_phase_tvalid	(phase_tvalid),
	.s_axis_phase_tdata		(phase_30MHz),
	.m_axis_dout_tvalid		(sincos_30MHz_tvalid),
	.m_axis_dout_tdata		({sin_30MHz,cos_30MHz})
);

//phase sweep

   always @(posedge cordic_clk)
	begin
		phase_tvalid <= 1'b1;
		
		//Sweep phase to synthesis 2Mhz sine
		if(phase_2MHz + PHASE_INC_2MHz < PI_POS) begin
			phase_2MHz <= phase_2MHz + PHASE_INC_2MHz;
		end else begin
			phase_2MHz <= PI_NEG + (phase_2MHz +  PHASE_INC_2MHz - PI_POS);
		end
		
		//Sweep phase to synthesis 30Mhz sine
		if(phase_30MHz + PHASE_INC_30MHz < PI_POS) begin
			phase_30MHz <= phase_30MHz + PHASE_INC_30MHz;
		end else begin
			phase_30MHz <= PI_NEG + (phase_30MHz +  PHASE_INC_30MHz - PI_POS);
		end
	end
	
// create 500MHz Cordic clock
always begin
	cordic_clk = #(CORDIC_CLK_PERIOD/2) ~cordic_clk;
end

// create 100MHz FIR clock
always begin
	fir_clk = #(FIR_CLK_PERIOD/2) ~fir_clk;
end


//Noisy sig = 2Mhz sine + 30 MHz sine
//Noisy sig is resampled at 100MHz FIR sampling rate
always @(posedge fir_clk)
begin
	noisy_signal <= (sin_2MHz + sin_30MHz) / 2;
end


//fed noisy signal into fir lowpass filter

	
		FIR_Filter_16tap #(N) uut (
        .clk			(fir_clk),
        .reset			(reset),
		.enable			(enable),
        .data_in		(noisy_signal),
        .data_out		(filtered_signal)
    );

	initial begin
		$monitor("Time=%0t, input_data=%h, filtered_out=%h", $time, noisy_signal, filtered_signal);
	end

	
endmodule
	
	
	
	
	
	
	

	